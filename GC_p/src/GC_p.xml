<?xml version="1.0" encoding="UTF-8"?>
<!-- 

	Garbage Collection(가비지 컬렉션)은 자바의 메모리 관리 방법 중 하나이다.
	C처럼 사용자가 직접 메모리를 해제해주는 방식이 아닌, JVM의 heap 영역에서 동적으로 할당했던 메모리 영역 중 필요없게 된 메모리 영역을 주기적으로 삭제하는 프로세스이다.
	
	가비지 컬렉션은 개발자가 메모리가 언제 해제되는지 알 수 없다는 단점을 지니고 있으며,
	GC가 동작하는 동안에는 다른 동작을 할 수 없는 Stop-The-World 상태가 되기 때문에 오버헤드가 발생한다는 단점 또한 지니고 있다.
	이로 인해 GC가 너무 자주 실행되면 소프트웨어의 성능이 하락하는 등의 문제가 발생할 수 있다.
	
	GC의 대상은 객체에 레퍼런스가 있는지를 판단 기준으로 하여 Garbage를 판정한다.
	객체가 참고되고 있는 상태이면 Reachable, 반대의 경우 Unreachable로 GC의 대상이 된다.
	
	GC가 Unreachable 상태로 Garbage를 판정하게 되면 이를 지우는 등의 청소를 한다.
	Mark-Sweep은 GC의 청소 알고리즘 중 하나이다. 객체를 식별(Mark)하고 제거(Sweep)한다.
	그리고 객체가 제거되면 파편화 된 메모리 영역을 앞에서부터 채워나가는 작업(Compaction)을 수행한다.
	
	Heap 영역은 동적으로 레퍼런스 데이터가 저장되는 곳이다. GC의 대상이 되는 공간이며, 효율적인 GC를 위해 Young과 Old 영역으로 설계되었다.
	Young 영역은 새로운 객체가 할당(Allocation)되는 영역이다.
	대부분의 객체가 금방 Unreachable 상태로 전환되기 때문에 많은 객체가 Young 영역에 생성되었다가 사라지며, Young 영역에 대한 GC를 Minor GC라고 부른다.
	Old 영역은 객체가 Young 영역에서 Reachable 상태를 유지하여 살아남았을 때 복사되는 영역이다.
	Young 영역보다 크게 할당되며, 영역의 크기가 큰 만큼 Garbage는 적게 발생하며, Old 영역에 대한 GC를 Major GC 혹은 Full GC라고 부른다.
	
	여기서 다시 효율적인 GC를 위해 Young 영역을 Eden, Survivor 0, Survivor1 3가지 영역으로 나눈다.
	Eden은 new를 통해 새로 객체가 생성된 위치이다.
	Survivor 0과 1은 최소 1번 이상 Eden에서 GC로부터 살아남은 객체가 존재하는 영역이다. Survivor 0과 1 둘 중 한 곳은 꼭 비어있어야 하는 규칙이 존재한다.
	동작 방식은 Eden 영역에 새로운 객체가 할당이 되고, 객체가 계속 생성되어 Eden 영역이 꽉 차게 되면 Minor GC가 실행된다.
	Eden 영역에서 Unreachable인 객체의 메모리가 해제되고, Reachable인 객체의 메모리는 살아남아 1개의 Survivor 영역으로 이동한다.
	이 과정이 반복되다가 Survivor 영역이 가득 차게 되면, Survivor 영역의 살아남은 객체를 다른 Survivor 영역으로 이동시킨다.
	또 다시 이 과정을 반복하여 계속해서 살아남은 객체는 Old 영역으로 이동된다.
	객체를 이동시키는 기준을 판별하기 위해 객체에 Age 값을 객체 Header에 기록한다.
	그리고 Minor GC 때 객체 Header에 기록된 Age를 보고 이동 여부를 결정한다.
	
	Major GC는 객체들이 계속 이동(Promotion)되어 Old 영역의 메모리가 부족해지면 발생한다.
	Young 영역은 Old 영역에 비해 크기가 작기 때문에 GC가 보통 1초 이내에 끝나기 때문에 Minor GC는 애플리케이션에 크게 영향을 주지 못한다.
	하지만 Young 영역보다 크고 Young 영역을 참조하기도 하는 Old 영역에서는 Major GC가 비교적 시간이 오래 걸린다.
	이 과정에서 상술한 Stop-The-World 의 문제가 발생하게 된다.

	Java는 JVM(Java Virtual Machine)을 사용하여 메모리 관리를 모두 맡겨버리기에 OS 레벨에서의 메모리 누수는 발생하지 않는다고 알려져 있다.
	하지만 실제로는 메모리 누수가 발생할 수 있다. 실제로 사용되지 않는 객체의 reference를 프로그램에서 잡고 있으면
	그 객체는 GC에 의해 처리되지 않고 프로그램내에서도 접근하여 사용될 수 없는 사실상의 Garbage로서 메모리를 점유하게 된다.
	주로 Integer, Long 같은 래퍼 클래스를 이용하여 무의미한 객체를 생성하거나 Map에 캐시 데이터를 선언하고 해제하지 않는 경우 등
	빈번한 전역 변수 선언, 리스트나 해쉬맵 같은 컬렉션에 저장한 객체를 사용하지 않고 계쏙 유지하게 될 시 메모리 누수가 발생한다.





	참고 -
	https://mangkyu.tistory.com/119
	https://coding-factory.tistory.com/829
	https://hbase.tistory.com/209
	https://velog.io/@woo00oo/GC-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%88%84%EC%88%98Memory-Leak
	https://dzone.com/articles/memory-leak-andjava-code
 -->